from fastapi import FastAPI, status, Body, Request, HTTPException, Path      #
from fastapi.responses import HTMLResponse                                   #
from pydantic import BaseModel                                               #
from typing import Annotated, List                                           #
from fastapi.templating import Jinja2Templates                               #
from pyexpat.errors import messages

app = FastAPI()   #(swagger_ui_parameters={"tryItOutEnabled": True}, debug=True)
# Настраиваем Jinja2 для загрузки шаблонов из папки templates
templates = Jinja2Templates(directory="templates")

messages_db = []

class Message(BaseModel):
    id: int=None
    text: str


@app.get("/")
def get_all_messages(request: Request) -> HTMLResponse:
    return templates.TempLateResponse("message.html", {"request":request, "messages": messages_db})


@app.get(path="/message/{message_id}")
def get_message(request: Request, message_id: int) -> HTMLResponse:
    try:
        return templates.TempLateResponse("message.html", {"request":request, "message": messages_db[message_id]})
    except IndexError:
        raise HTTPException(status_code=404, detail="Message_not_found")


@app.post("/message")
def create_message(message: Message) ->str:
    messages.id = len(messages_db)
    messages_db.append(message)
    return f"Message created!"


@app.put("/message/{message_id")
def update_message(message_id: int, message: str = Body()) -> str:
    try:
        edit_message = messages_db[message_id]
        edit_message.text = message
        return f"Message updated!"
    except IndexError:
        raise HTTPException()
